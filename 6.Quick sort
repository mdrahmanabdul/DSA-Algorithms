///////////////////////// QUICK SORT ALGORITHM  /////////////////////////

/*  
Time complexities : 
 ============>Time Complexities <============
 Best case : O(nlogn)
 Average case : O(nlogn)
 Worst case : O(n^2)
 =================> Space Complexity <=================
    ->O(logn) for runtime stack space
====================> More Details <====================
 Stable : No
 Sorting class type : Comparison
*/
#include<iostream>
using namespace std;
int partition(int *arr,int low,int high){
    int pivot = arr[low];
    int count=0;
    for(int i=low+1;i<=high;i++){
        if(arr[i]<=pivot){
            count++;
        }
    }
    
    int pivotIndex=low+count;
    swap(arr[low],arr[pivotIndex]);
    
    int i=low,j=high;
    while(i<pivotIndex && j>pivotIndex){
        while(arr[i]<=pivot){
            i++;
        }
        while(arr[j]>pivot){
            j--;
        }
        if(i<pivotIndex && j>pivotIndex){
            swap(arr[i++],arr[j--]);
        }
        
    }
    return pivotIndex;
}
void quickSort(int arr[],int low,int high){
 if(low>=high){
     return;
 }
    int p = partition(arr,low,high);
    quickSort(arr,low,p-1);
    quickSort(arr,p+1,high);
}
int main()
{
    int arr[]={4,1,2,3,1,5};
    int n = sizeof(arr)/sizeof(arr[0]);
    quickSort(arr,0,n-1);
    for(int i=0;i<n;i++){
        cout<<arr[i]<<" ";
    }
}
